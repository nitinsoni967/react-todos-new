{"version":3,"sources":["loader1.gif","ListItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItem","props","className","item","name","onClick","editTodo","deleteTodo","App","state","newTodo","editing","editingIndex","notification","error","loading","todos","apiUrl","handleChange","bind","addTodo","updateTodo","alert","axios","get","this","response","console","log","setTimeout","setState","data","event","target","value","post","push","index","todo","delete","id","put","type","placeholder","onChange","disabled","length","src","loadingGif","alt","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b00e756c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader1.3e803924.gif\";","import React from 'react';\r\n\r\nconst ListItem = (props) => {\r\n    return <li className=\"list-group-item\">{props.item.name}\r\n        <button\r\n            className=\"btn-warning btn-xs ml-4\"\r\n            onClick={props.editTodo}\r\n        ><i className=\"fa fa-edit\"></i></button>\r\n        <button\r\n            className=\"btn-danger btn-xs ml-4\"\r\n            onClick={props.deleteTodo}\r\n        ><i className=\"fa fa-trash\"></i></button>\r\n    </li>;\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\nimport './App.css';\nimport ListItem from './ListItem';\nimport axios from 'axios';\nimport loadingGif from './loader1.gif';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      newTodo: '',\n      editing: false,\n      editingIndex: null,\n      notification: null,\n      error: null,\n      loading: true,\n      todos: []\n    }\n\n    this.apiUrl = 'https://5ddd242ef40ae700141e8d39.mockapi.io';\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n    this.deleteTodo = this.deleteTodo.bind(this);\n    this.updateTodo = this.updateTodo.bind(this);\n    this.editTodo = this.editTodo.bind(this);\n    this.alert = this.alert.bind(this);\n\n  }\n\n  async componentDidMount() {\n    const response = await axios.get(`${this.apiUrl}/todos`);\n    console.log(response);\n\n    setTimeout(() => {\n      this.setState({\n        todos: response.data,\n        loading: false\n      })\n    }, 1000)\n\n  }\n\n  handleChange(event) {\n    this.setState({ newTodo: event.target.value })\n    console.log(event.target.name, event.target.value);\n  }\n\n  async addTodo() {\n\n    const response = await axios.post(`${this.apiUrl}/todos`, { name: this.state.newTodo })\n    const todos = this.state.todos;\n\n    todos.push(response.data);\n\n    this.setState({ todos, newTodo: '' })\n    this.alert('Todo Added Successfully');\n    console.log(response);\n  }\n\n  async deleteTodo(index) {\n    const todos = this.state.todos;\n    const todo = todos[index];\n\n    await axios.delete(`${this.apiUrl}/todos/${todo.id}`);\n    delete todos[index];\n\n    this.setState({ todos });\n    this.alert('Todo Deleted Successfully');\n  }\n\n  editTodo(index) {\n    const todo = this.state.todos[index];\n    this.setState({ editing: true, newTodo: todo.name, editingIndex: index })\n  }\n\n  async updateTodo() {\n    const todo = this.state.todos[this.state.editingIndex];\n\n    const response = await axios.put(`${this.apiUrl}/todos/${todo.id}`, {\n      name: this.state.newTodo\n    })\n\n    const todos = this.state.todos;\n    todos[this.state.editingIndex] = response.data;\n\n    this.setState({ todos, editing: false, editingIndex: null, newTodo: '' });\n    this.alert('Todo Updated Successfully');\n  }\n\n\n  alert(notification) {\n    this.setState({\n      notification\n    })\n\n    setTimeout(() => {\n      this.setState({ notification: null })\n    }, 2000)\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"text-center p-4\">Todos App</h1>\n\n        {\n          this.state.notification &&\n          <div className=\"container\">\n            <div className=\"alert alert-success mt-3\">\n              <p className=\"text-center\">\n                {this.state.notification}\n              </p>\n            </div>\n          </div>\n        }\n\n\n        <div className=\"container\">\n          <input\n            className=\"form-control my-4 p-4\"\n            type=\"text\"\n            placeholder=\"Add a new To-Do\"\n            name=\"todo\"\n            onChange={this.handleChange}\n            value={this.state.newTodo}\n          ></input>\n\n          <button\n            name=\"btnAddTodo\"\n            className=\"btn-success form-control my-4 btn-xs\"\n            onClick={this.state.editing ? this.updateTodo : this.addTodo}\n            disabled={this.state.newTodo.length < 5}\n          >\n            {\n              this.state.editing ? 'Update Todo' : 'Add Todo'\n            }\n          </button>\n\n          {this.state.loading &&\n            <img src={loadingGif} alt=\"\"></img>\n          }\n        </div>\n\n        <div className=\"container\">\n          {(!this.state.editing || this.state.loading) &&\n            <ul className=\"list-group\">\n              {\n                this.state.todos.map((item, index) => {\n                  return <ListItem\n                    item={item}\n                    key={item.id}\n                    editTodo={() => this.editTodo(index)}\n                    deleteTodo={() => this.deleteTodo(index)}\n                  />\n                })\n              }\n            </ul>\n          }\n        </div>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}